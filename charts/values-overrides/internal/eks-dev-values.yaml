domain: eks-dev.grph.xyz 
tlsEmail: "cody@graphistry.com" 
tls: true
metrics: false
fwdHeaders: true
#volumeName:
#  dataMount: pvc-1f74538d-971f-451c-be91-c924b523036c
#  localMediaMount: pvc-803077a4-6f51-4349-beaf-1771782804cd
#  gakPublic: pvc-ed2c196c-3bee-4884-b8b0-686a21cc571c
#  gakPrivate: pvc-2a220f57-0986-40b5-b01e-ba392ce29a8e
networkPolicy:
  strict: true

graphistryResources:
  storageClassParameters:
      csi.storage.k8s.io/fstype: ext4
      type: gp2

  ## createServiceAccount: true only true on initial deployment
k8sDashboard:
  enabled: true
  readonly: false
  createServiceAccount: false

#example values.yaml of an aws eks based deployment

grafana:
  grafana.ini:
      server:
        domain: "eks-dev.grph.xyz"
        root_url: "https://eks-dev.grph.xyz/grafana"
        serve_from_sub_path: true
      auth.anonymous:
        enabled: true

prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false

ingress-nginx:
  controller:
    metrics:
      enabled: true 
      serviceMonitor:
        enabled: true 
        additionalLabels:
          release: "prometheus"


cert-manager: #defined by either the name or alias of your dependency in Chart.yaml
  namespace: cert-manager
  installCRDs: true
  createCustomResource: true
      
global:
  provisioner: ebs.csi.aws.com
  tag: v2.39.27
  nodeSelector: {"accelerator": "nvidia"}
  #change log levels
  #logs:
  #  LogLevel: "TRACE"
  #  GraphistryLogLevel: "TRACE"
  #multinode setting
  #multiNode: true
  imagePullPolicy: Always
  imagePullSecrets: 
    - name: docker-secret-prod
#  postgresVolumeLabel: graphistry-postgres
  #dev mode for debugging with nexus, postgres and nginx
  #devMode: true




#helm upgrade -i prometheus-community ./charts/kube-prometheus-stack --values ./charts/values-overrides/internal/eks-dev-values.yaml --namespace prometheus --create-namespace --dry-run
#helm upgrade -i g-chart ./charts/graphistry-helm --values ./charts/values-overrides/internal/eks-dev-values.yaml --namespace graphistry --create-namespace --dry-run 
