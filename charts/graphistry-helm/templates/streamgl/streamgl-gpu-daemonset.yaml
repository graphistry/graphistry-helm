{{ if eq .Values.global.devMode false }}

apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    autoheal: "true"
    kompose.cmd: kompose --file ./compose/release.yml convert -c
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: streamgl-gpu
  name: streamgl-gpu
spec:
  selector:
    matchLabels:
      io.kompose.service: streamgl-gpu
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      annotations:
        autoheal: "true"
        kompose.cmd: kompose --file ./compose/release.yml convert -c
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.network/grph: "true"
        io.kompose.service: streamgl-gpu
    spec:
      initContainers:
      - name: "{{ lower .Chart.Name }}-init"
        {{- if eq .Values.global.containerregistry.name "docker.io" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args: 
        - "service"
        - "nexus"
      containers:
        - env:
   {{- range .Values.env }}
          - name: {{ .name  }}
            value: {{ .value | quote }}
   {{- end }}
          {{- if eq .Values.vgpu true  }}
          - name: RMM_ALLOCATOR
            value: "default"
        {{- end }}
          - name: REMOTE_DASK
            value: {{.Values.daskscheduler.location | quote }}
          - name: POSTGRES_HOST
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: host } }
          - name: POSTGRES_PORT
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: port } }
          - name: POSTGRES_DB
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: dbname } }
          - name: POSTGRES_USER
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: user } }
          - name: POSTGRES_PASSWORD
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: password } }
          - name: DATABASE_URL
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: uri } }
          - name: GRAPHISTRY_LOG_LEVEL
            value: {{ .Values.global.logs.GraphistryLogLevel | quote }}
          - name: LOG_LEVEL
            value: {{ .Values.global.logs.LogLevel | quote }}  
          image: {{.Values.global.containerregistry.name}}/{{.Values.graphistry}}/{{.Values.graphistry}}:{{.Values.streamglgpu.repository}}-{{.Values.global.tag}}-{{.Values.cuda.version}}
          imagePullPolicy: {{.Values.global.imagePullPolicy }}        
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - curl -sSf http://localhost:8080/check-workers | jq .status | grep 200 || exit 1
            failureThreshold: 3
            initialDelaySeconds: 180
            periodSeconds: 120
            timeoutSeconds: 30
          name: streamgl-gpu
          ports:
            - containerPort: 8080
          resources:
            limits:
              memory: 2Gi
              cpu: 4.0
          volumeMounts:
            - mountPath: /opt/graphistry/data
              name: data-mount
      restartPolicy: {{ .Values.global.restartPolicy }}
      serviceAccountName: job-robot
      volumes:
        - name: data-mount
          persistentVolumeClaim:
            claimName: data-mount
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
#      imagePullSecrets:
#          - name: {{ .Values.global.imagePullSecrets }} 
      nodeSelector: {{- .Values.global.nodeSelector | toYaml | nindent 8 }}
#status: {}

---
#service
apiVersion: v1
kind: Service
metadata:
  annotations:
    autoheal: "true"
    kompose.cmd: kompose --file ./compose/release.yml convert -c
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: streamgl-gpu
  name: streamgl-gpu
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: streamgl-gpu
status:
  loadBalancer: {}

{{- end }}