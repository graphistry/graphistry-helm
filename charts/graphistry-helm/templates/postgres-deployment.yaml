apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    autoheal: "true"
    kompose.cmd: kompose --file ./compose/release.yml convert -c
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgres
  strategy:
{{ if eq .Values.rollingUpdate true }}
    type: RollingUpdate
    rollingUpdate:
      maxSurge: "25%"
      maxUnavailable: "0%"
{{ else }}
    type: Recreate
{{- end }}
  template:
    metadata:
      annotations:
        autoheal: "true"
        kompose.cmd: kompose --file ./compose/release.yml convert -c
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.network/grph: "true"
        io.kompose.service: postgres
    spec:
      containers:
        - env:
   {{- range .Values.env }}
          - name: {{ .name  }}
            value: {{ .value | quote }}
   {{- end }}
          image: {{.Values.azurecontainerregistry.name}}/{{.Values.graphistry}}:{{.Values.postgres.repository}}-{{.Values.tag}}-universal
          imagePullPolicy: {{.Values.imagePullPolicy }}         
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U graphistry
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 5
          name: postgres
          ports:
            - containerPort: 5432
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
              subPath: data
            - mountPath: /backups
              name: postgres-data
            - mountPath: /var/graphistry/postgres
              name: postgres-data
            - mountPath: /opt/graphistry/data
              name: data-mount
      restartPolicy: {{ .Values.restartPolicy }}
      serviceAccountName: job-robot
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data
        - name: data-mount
          persistentVolumeClaim:
            claimName: data-mount
      imagePullSecrets:
          - name: {{ .Values.imagePullSecrets }}    
{{ if eq .Values.multiNode false }}
      nodeSelector: {{- .Values.nodeSelector | toYaml | nindent 8 }}
{{- end }}    
status: {}

---
#service
apiVersion: v1
kind: Service
metadata:
  annotations:
    autoheal: "true"
    kompose.cmd: kompose --file ./compose/release.yml convert -c
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: postgres
  name: postgres
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    io.kompose.service: postgres
status:
  loadBalancer: {}

---
# longhorn storageclass setting reclaim policy to retain
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: postgres-longhorn
  annotations:
    # make this class the default storage class
    #storageclass.kubernetes.io/is-default-class: "true"
provisioner: driver.longhorn.io
reclaimPolicy: Retain
allowVolumeExpansion: true
parameters:
  numberOfReplicas: "3"
  staleReplicaTimeout: "2880" # 48 hours in minutes
  fromBackup: ""
---
#volumes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: postgres-data
  name: postgres-data
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: postgres-longhorn
  resources:
    requests:
      storage: 1Gi
status: {}

