{{ if eq .Values.devMode false }}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    autoheal: "true"
    kompose.cmd: kompose --file ./compose/release.yml convert -c
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: dask-scheduler
  name: dask-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: dask-scheduler
  strategy:
{{ if eq .Values.rollingUpdate true }}
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: "0%"
{{ else }}
    type: Recreate
{{- end }}
  template:
    metadata:
      annotations:
        autoheal: "true"
        kompose.cmd: kompose --file ./compose/release.yml convert -c
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.network/grph: "true"
        io.kompose.service: dask-scheduler
    spec:
      initContainers:
      - name: "{{ lower .Chart.Name }}-init"
        {{- if eq .Values.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        imagePullPolicy: {{.Values.imagePullPolicy }} 
        args: 
        - "job"
        - "nexus-migration-job-{{ .Release.Revision}}"
      containers:
        - args:
            - dask-scheduler
            - --port
            - "8786"
            - --interface
            - eth0
            - --no-show
            - --dashboard-address
            - "8787"
          command:
            - /entrypoints/rapids-entrypoint.sh
          env:
   {{- range .Values.env }}
          - name: {{ .name  }}
            value: {{ .value | quote }}
   {{- end }}
          - name: POSTGRES_PORT
            value: {{.Values.postgres.port | quote }}
          - name: POSTGRES_HOST
            value: "{{.Values.postgres.host }}.postgres.{{ .Release.Namespace }}.svc.cluster.local"
          image: {{.Values.containerregistry.name}}/{{.Values.graphistry}}:{{.Values.daskscheduler.repository}}-{{.Values.tag}}-{{.Values.cuda.version}}

          imagePullPolicy: {{.Values.imagePullPolicy }}           
          livenessProbe:
            exec:
              command:
                - curl
                - -Lf
                - http://localhost:8787/health
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 30
          name: dask-scheduler
          ports:
            - containerPort: 8786
            - containerPort: 8787
          resources: {}
          volumeMounts:
            - mountPath: /opt/graphistry/data
              name: data-mount
            - mountPath: /dask-shared
              name: data-mount
      restartPolicy: {{ .Values.restartPolicy }}
      serviceAccountName: job-robot
      volumes:
        - name: data-mount
          persistentVolumeClaim:
            claimName: data-mount            
      imagePullSecrets:
          - name: {{ .Values.imagePullSecrets }} 
{{ if eq .Values.multiNode false }}
      nodeSelector: {{- .Values.nodeSelector | toYaml | nindent 8 }}
{{- end }} 
status: {}

---
#service
apiVersion: v1
kind: Service
metadata:
  annotations:
    autoheal: "true"
    kompose.cmd: kompose --file ./compose/release.yml convert -c
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: dask-scheduler
  name: dask-scheduler
spec:
  ports:
    - name: "8786"
      port: 8786
      targetPort: 8786
    - name: "8787"
      port: 8787
      targetPort: 8787
  selector:
    io.kompose.service: dask-scheduler
status:
  loadBalancer: {}
{{ end }}   