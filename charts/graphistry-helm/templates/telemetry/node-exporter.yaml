{{ if eq .Values.telemetryEnv.ENABLE_OPEN_TELEMETRY true }}
  {{ if eq .Values.telemetryEnv.OTEL_CLOUD_MODE false }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    io.kompose.service: node-exporter
  name: node-exporter
spec:
  selector:
    matchLabels:
      io.kompose.service: node-exporter
  template:
    metadata:
      labels:
        io.kompose.network/grph: "true"
        io.kompose.service: node-exporter
    spec:
      containers:
        - env:
            - name: NODE_ENV
              value: {{ .Values.nodeEnv | quote }}
          {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
            - name: GRAPHISTRY_LOG_LEVEL
              value: {{ .Values.global.logs.GraphistryLogLevel | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.global.logs.LogLevel | quote }}
          image: prom/node-exporter:v1.8.2
          args: # Skip '--collector.systemd' since we're running in Docker.
            - '--collector.processes'
          imagePullPolicy: {{ .Values.global.imagePullPolicy | quote }}
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          name: node-exporter
          ports:
            - containerPort: 9100
          resources:
            {{- toYaml .Values.StreamglVizResources | nindent 12 }}
      restartPolicy: {{ .Values.global.restartPolicy | quote }}
      serviceAccountName: job-robot
      imagePullSecrets:
        {{- toYaml .Values.global.imagePullSecrets | nindent 8 }}
{{- if eq .Values.global.multiNode false }}
      nodeSelector:
        {{- toYaml .Values.global.nodeSelector | nindent 8 }}
{{- end }}
---
#service
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: node-exporter
  name: node-exporter
spec:
  ports:
    - name: "9100"
      port: 9100
      targetPort: 9100
  selector:
    io.kompose.service: node-exporter
status:
  loadBalancer: {}
  {{- end }}
{{- end }}
