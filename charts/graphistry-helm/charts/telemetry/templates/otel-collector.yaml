{{ if eq .Values.global.ENABLE_OPEN_TELEMETRY true }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    io.kompose.service: otel-collector
  name: otel-collector
spec:
  selector:
    matchLabels:
      io.kompose.service: otel-collector
  template:
    metadata:
      labels:
        io.kompose.network/grph: "true"
        io.kompose.service: otel-collector
    spec:
      {{ if eq .Values.global.telemetryStack.OTEL_CLOUD_MODE false }}
{{- if and (eq .Values.global.ENABLE_CLUSTER_MODE true) (eq .Values.global.IS_FOLLOWER true) }}
{{ else }}
      initContainers:
      - name: "{{ lower .Chart.Name }}-init-prometheus"
        {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        resources:
            {{- toYaml .Values.InitContainerResources | nindent 10 }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args:
        - "service"
        - "prometheus"
      - name: "{{ lower .Chart.Name }}-init-jaeger"
        {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        resources:
            {{- toYaml .Values.InitContainerResources | nindent 10 }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args: 
        - "service"
        - "jaeger"
      {{- end }}
{{- end }}
      containers:
        - env:
            - name: GRAPHISTRY_INSTANCE_NAME
              value: {{ .Values.global.GRAPHISTRY_INSTANCE_NAME | quote }}
            - name: OTEL_EXPORTER_JAEGER_ENDPOINT
              value: {{ .Values.global.telemetryStack.jaeger.OTEL_EXPORTER_JAEGER_ENDPOINT | quote }}
          {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          {{- if eq .Values.global.telemetryStack.OTEL_CLOUD_MODE true }}
            - name: OTEL_COLLECTOR_OTLP_USERNAME
              value: {{ .Values.global.telemetryStack.openTelemetryCollector.OTEL_COLLECTOR_OTLP_USERNAME | quote }}
            - name: OTEL_COLLECTOR_OTLP_PASSWORD
              value: {{ .Values.global.telemetryStack.openTelemetryCollector.OTEL_COLLECTOR_OTLP_PASSWORD | quote }}
            - name: OTEL_COLLECTOR_OTLP_HTTP_ENDPOINT
              value: {{ .Values.global.telemetryStack.openTelemetryCollector.OTEL_COLLECTOR_OTLP_HTTP_ENDPOINT | quote }}
            - name: LEADER_OTEL_EXPORTER_OTLP_ENDPOINT
              value: {{ .Values.global.telemetryStack.openTelemetryCollector.LEADER_OTEL_EXPORTER_OTLP_ENDPOINT | quote }}
          {{- end }}
          image: {{ .Values.global.telemetryStack.openTelemetryCollector.image | quote }}
          args:
            - "--config=/etc/otelcol/otel-collector-config.yml"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | quote }}
          # TODO It seems the healthcheck service has some issues:
          # https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/30798
          # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/v0.105.0/extension/healthcheckextension#health-check
          # livenessProbe:
          #   httpGet:
          #     path: /healthz
          #     port: 13133
          #   failureThreshold: 3
          #   initialDelaySeconds: 180
          #   periodSeconds: 120
          #   timeoutSeconds: 30
          name: otel-collector
          ports:
            - containerPort: 4317
            - containerPort: 8889  # Prometheus exporter metrics
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "2Gi"
          volumeMounts:
            - name: otel-collector-config-mount
              mountPath: /etc/otelcol
              readOnly: true
      restartPolicy: {{ .Values.global.restartPolicy | quote }}
      serviceAccountName: job-robot
      volumes:
        - name: otel-collector-config-mount
          {{- if eq .Values.global.telemetryStack.OTEL_CLOUD_MODE false }}
          configMap:
            name: otel-collector-configmap
          {{- else }}
          configMap:
            name: otel-collector-configmap-cloud
          {{- end }}
      imagePullSecrets:
        {{- toYaml .Values.global.imagePullSecrets | nindent 8 }}
{{- if eq .Values.global.multiNode false }}
      nodeSelector:
        {{- toYaml .Values.global.nodeSelector | nindent 8 }}
{{- end }}
---
#service
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: otel-collector
  name: otel-collector
spec:
{{- if and (eq .Values.global.ENABLE_CLUSTER_MODE true) (eq .Values.global.IS_FOLLOWER true) }}
  type: ClusterIP
{{ else }}
  type: LoadBalancer
{{- end }}
  ports:
    - name: "4317"
      port: 4317
      targetPort: 4317
    - name: "8889"
      port: 8889
      targetPort: 8889
  selector:
    io.kompose.service: otel-collector
status:
  loadBalancer: {}
{{ end }}
