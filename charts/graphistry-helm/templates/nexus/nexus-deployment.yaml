apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: nexus
    app: nexus
  name: nexus
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: nexus
  strategy:
{{ if eq .Values.rollingUpdate true }}
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: "0%"
{{ else }}
    type: Recreate
{{- end }}
  template:
    metadata:
      labels:
        io.kompose.network/grph: "true"
        io.kompose.service: nexus
    spec:
      initContainers:
      - name: "nexus-wait-for-postgres"
        {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        resources:
          {{- toYaml .Values.InitContainerResources | nindent 10 }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args: 
        - "pod"
        - "-lapp=postgres"
      containers:
        - env:
          - name: GRAPHISTRY_CPU_MODE
            value: {{.Values.graphistryCPUMode | quote }}
          - name : NODE_ENV
            value: {{ .Values.nodeEnv | quote }}
          - name : APP_ENVIRONMENT
            value: {{ .Values.appEnvironment | quote }}
          - name : DJANGO_SETTINGS_MODULE
            value: {{ .Values.djangoSettingsModule | quote }}
          - name : DJANGO_DEBUG
            value: {{ .Values.djangoDebug | quote }}
          - name : SESSION_COOKIE_AGE 
            value: {{ .Values.sessionCookieAge | quote }}
          - name : JWT_EXPIRATION_DELTA 
            value: {{ .Values.jwtExpirationDelta | quote }}
          - name : ENABLE_DJANGO_SILK
            value: {{ .Values.enableDjangoSilk | quote  }}
          {{- if eq .Values.tls true  }}
          - name: COOKIE_SECURE
            value: "True"
        {{- end }}
   {{- range .Values.env }}
          - name: {{ .name  }}
            value: {{ .value | quote }}
   {{- end }}
          - name: POSTGRES_HOST
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: host } }
          - name: POSTGRES_PORT
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: port } }
          - name: POSTGRES_DB
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: dbname } }
          - name: POSTGRES_USER
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: user } }
          - name: POSTGRES_PASSWORD
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: password } }
          - name: DATABASE_URL
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: uri } }
            #stripe stuff
          - name: STRIPE_TEST_PUBLIC_KEY
            valueFrom: { secretKeyRef: { name: stripe-secret , key: test-public-key , optional: true } }
          - name: STRIPE_TEST_SECRET_KEY
            valueFrom: { secretKeyRef: { name: stripe-secret , key: test-secret-key , optional: true } }
          - name: DJSTRIPE_WEBHOOK_SECRET
            valueFrom: { secretKeyRef: { name: stripe-secret , key: webhook-secret , optional: true } }
          - name: STRIPE_LIVE_MODE
            value: {{ .Values.stripeLiveMode | quote  }}
          - name: STRIPE_LIVE_PUBLIC_KEY
            valueFrom: { secretKeyRef: { name: stripe-secret , key: live-public-key , optional: true } }
          - name: STRIPE_LIVE_SECRET_KEY
            valueFrom: { secretKeyRef: { name: stripe-secret , key: live-secret-key , optional: true } }
          - name: DJSTRIPE_WEBHOOK_VALIDATION
            value: 'retrieve_event'
          - name: STRIPE_PRODUCT_INDIVIDUAL_ID
            valueFrom: { secretKeyRef: { name: stripe-secret , key: product-indiv-id , optional: true } }
          - name: STRIPE_PRODUCT_TEAM_ID
            valueFrom: { secretKeyRef: { name: stripe-secret , key: product-team-id , optional: true } }
          - name: STRIPE_PRODUCT_ENTERPRISE_ID
            valueFrom: { secretKeyRef: { name: stripe-secret , key: product-enterprise-id , optional: true } }
          - name: STRIPE_PLAN_INDIVIDUAL_MONTHLY_ID
            valueFrom: { secretKeyRef: { name: stripe-secret , key: plan-indiv-monthly-id , optional: true } }
          - name: STRIPE_PLAN_INDIVIDUAL_ANNUALLY_ID
            valueFrom: { secretKeyRef: { name: stripe-secret , key: plan-indiv-annually-id , optional: true } }
          - name: STRIPE_PLAN_TEAM_MONTHLY_ID
            valueFrom: { secretKeyRef: { name: stripe-secret , key: plan-team-monthly-id , optional: true } }
          - name: STRIPE_PLAN_TEAM_ANNUALLY_ID
            valueFrom: { secretKeyRef: { name: stripe-secret , key: plan-team-annually-id , optional: true } }
          - name: STRIPE_PLAN_ENTERPRISE_MONTHLY_ID
            valueFrom: { secretKeyRef: { name: stripe-secret , key: enterprise-monthly-id , optional: true } }
          - name: STRIPE_PLAN_ENTERPRISE_ANNUALLY_ID
            valueFrom: { secretKeyRef: { name: stripe-secret , key: enterprise-annually-id , optional: true } }
            
          - name: GRAPHISTRY_LOG_LEVEL
            value: {{ .Values.global.logs.GraphistryLogLevel | quote }}
          - name: LOG_LEVEL
            value: {{ .Values.global.logs.LogLevel | quote }}  
     {{ if eq .Values.global.devMode false }}
          image: {{.Values.global.containerregistry.name}}/{{.Values.graphistry}}:{{.Values.nexus.repository}}-{{.Values.global.tag}}-{{.Values.cuda.version}}
      {{ else }}  
          image: {{.Values.graphistry}}/{{.Values.nexusDev.repository}}:{{.Values.global.tag}}-universal-dev
    {{ end }}        
          imagePullPolicy: {{.Values.global.imagePullPolicy }}      
          livenessProbe:
            exec:
              command:
                - sh 
                - -c 
                - 'curl -f -s -o /dev/null http://localhost:8000/ht/'
                
            failureThreshold: 3
            initialDelaySeconds: 180
            periodSeconds: 120
            timeoutSeconds: 30
          name: nexus
          ports:
            - containerPort: {{.Values.nexusPort.portOne}}
            - containerPort: {{.Values.nexusPort.portTwo}}
              name: nexus
              protocol: TCP
          resources:
            {{- toYaml .Values.NexusResources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/graphistry/apps/core/nexus/staticfiles
              name: local-media-mount
            - mountPath: /opt/graphistry/data
              name: data-mount
            - mountPath: /nexus_media
              name: data-mount
      restartPolicy: {{ .Values.global.restartPolicy }}
      serviceAccountName: job-robot
      volumes:
        - name: local-media-mount
          persistentVolumeClaim:
            claimName: local-media-mount
        - name: data-mount
          persistentVolumeClaim:
            claimName: data-mount
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
#      imagePullSecrets:
#          - name: {{ .Values.global.imagePullSecrets }} 
{{ if eq .Values.global.multiNode false }}
      nodeSelector: {{- .Values.global.nodeSelector | toYaml | nindent 8 }}
{{- end }} 
status: {}

---
#service
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: nexus
  name: nexus
spec:
  ports:
    - name: "{{.Values.nexusPort.portOne}}"
      port: {{.Values.nexusPort.portOne}}
      targetPort: {{.Values.nexusPort.portOne}}
      protocol: TCP
    - name: "{{.Values.nexusPort.portTwo}}"
      port: {{.Values.nexusPort.portTwo}}
      targetPort: {{.Values.nexusPort.portTwo}}

  selector:
    io.kompose.service: nexus
status:
  loadBalancer: {}
