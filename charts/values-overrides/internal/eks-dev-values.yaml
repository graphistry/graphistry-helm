domain: eks-dev.grph.xyz 
tlsEmail: "cody@graphistry.com" 
tls: true
graphAppKitusername: 
graphAppKitpassword: 
metrics: true
fwdHeaders: true


  ## createServiceAccount: true only true on initial deployment
k8sDashboard:
  k8sDashboard: 
    enabled: true
    readonly: false
    createServiceAccount: false

#example values.yaml of an aws eks based deployment


grafana:
  grafana.ini:
      server:
        domain: eks-dev.grph.xyz
        root_url: https://eks-dev.grph.xyz/k8s/grafana
        serve_from_sub_path: true
      auth.anonymous:
        enabled: true

prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false


graphistry-helm-resources:
  storageClassParameters:
      csi.storage.k8s.io/fstype: ext4
      type: gp2

      
global:
  provisioner: ebs.csi.aws.com
  tag: v2.39.28-admin
  nodeSelector: {"kubernetes.io/hostname": "ip-172-31-29-0.us-east-2.compute.internal"}
  #logs:
  #  LogLevel: DEBUG
  #  GraphistryLogLevel: DEBUG
  imagePullPolicy: Always
  containerregistry:
    name: docker.io/graphistry
  imagePullSecrets: docker-secret-prod
  #dev mode for debugging with nexus, postgres and nginx
  devMode: false
  graphistry: graphistry
  #postgres repository name 
  postgres:
    repository: graphistry-postgres
    name: graphistry
    user: graphistry
    port: 5432
    host: postgres



#helm upgrade -i prom ./charts/kube-prometheus-stack --values ./charts/overrides/internal/eks-dev-values.yaml --namespace prometheus --create-namespace --dry-run
#helm upgrade -i g-chart ./charts/graphistry-helm --values ./charts/overrides/internal/eks-dev-values.yaml --namespace graphistry --create-namespace 