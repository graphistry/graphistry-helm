{{ if eq .Values.global.devMode false }}
{{- if and (eq .Values.global.ENABLE_CLUSTER_MODE true) (eq .Values.global.IS_FOLLOWER true) }}
{{ else }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  strategy:
{{ if eq .Values.rollingUpdate true }}
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: "0%"
{{ else }}
    type: Recreate
{{- end }}
  template:
    metadata:
      labels:
        io.kompose.network/grph: "true"
        io.kompose.service: redis
    spec:
      containers:
        - env:
          - name: ENABLE_CLUSTER_MODE
            value: {{ .Values.global.ENABLE_CLUSTER_MODE | quote }}
          - name: GRAPHISTRY_INSTANCE_NAME
            value: {{ .Values.global.GRAPHISTRY_INSTANCE_NAME | quote }}
   {{- range .Values.env }}
          - name: {{ .name  }}
            value: {{ .value | quote }}
   {{- end }}
          - name: POSTGRES_HOST
          {{ if eq .Values.global.IS_FOLLOWER true }}
            value: {{ .Values.global.POSTGRES_HOST | quote }}
          {{ else }}
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: host } }
          {{- end }}
          - name: POSTGRES_PORT
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: port } }
          - name: POSTGRES_DB
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: dbname } }
          - name: POSTGRES_USER
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: user } }
          - name: POSTGRES_PASSWORD
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: password } }
          - name: DATABASE_URL
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: uri } }
          - name: GRAPHISTRY_LOG_LEVEL
            value: {{ .Values.global.logs.GraphistryLogLevel | quote }}
          - name: LOG_LEVEL
            value: {{ .Values.global.logs.LogLevel | quote }}  
          {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
          image: {{.Values.redis.repository}}:{{.Values.redis.tag}} #DockerHub
          {{ else }}
          image: {{.Values.global.containerregistry.name}}/{{.Values.redis.repository}}:{{.Values.redis.tag}}
          {{- end }}
          imagePullPolicy: {{.Values.global.imagePullPolicy }}         
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            failureThreshold: 3
            periodSeconds: 30
            timeoutSeconds: 10
          name: redis
          # command: ["redis-server", "--loglevel", "debug"]  # Set log level to debug
          ports:
            - containerPort: 6379
          resources:
            {{- toYaml .Values.RedisResources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/graphistry/data
              name: data-mount
      restartPolicy: {{ .Values.global.restartPolicy }}
      serviceAccountName: job-robot
      volumes:
      {{- if eq .Values.global.ENABLE_CLUSTER_MODE true }}
        - name: data-mount
{{- toYaml .Values.global.clusterVolume | nindent 10 }}
      {{ else }}
        - name: data-mount
          persistentVolumeClaim:
            claimName: data-mount
      {{- end }}
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
#      imagePullSecrets:
#          - name: {{ .Values.global.imagePullSecrets }}  
{{ if eq .Values.global.multiNode false }}
      nodeSelector: {{- .Values.global.nodeSelector | toYaml | nindent 8 }}
{{- end }} 
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: redis
  name: redis
spec:
{{- if and (eq .Values.global.ENABLE_CLUSTER_MODE true) (eq .Values.global.IS_FOLLOWER true) }}
  type: ClusterIP
{{ else }}
  type: LoadBalancer
{{- end }}
  ports:

    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    io.kompose.service: redis
status:
  loadBalancer: {}
{{- end }}
{{- end }}
