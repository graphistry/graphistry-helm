#FOR DEV CLUSTER
name: helm setup and deployment
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
      cluster:
        description: 'cluster to deploy to (eks-dev2,skinny)'
        required: true
jobs:
  check-dev-true:
      runs-on: ubuntu-latest
      outputs:
        DEV_TRUE: ${{ steps.dev-true.outputs.defined }}
      steps:
          - id: dev-true
            if: "${{ env.DEV_TRUE == 'TRUE' }}"
            run: echo "::set-output name=defined::true"
            env:
                DEV_TRUE: ${{secrets.DEV_TRUE}}
  test:
    env:
      DOCKER_BUILDKIT: 1
    if: needs.check-dev-true.outputs.DEV_TRUE == 'TRUE'
    runs-on: ubuntu-latest
    needs: [check-dev-true]
    
    steps:
      - uses: actions/checkout@v2
      - name: envvars
        #TODO PR_NUMBER: wat - https://github.com/actions/checkout/issues/58
        run: |
          ## echo "SERVICE_PRINCIPAL_NAME=${{ secrets.SERVICE_PRINCIPAL_NAME  }}" >> $GITHUB_ENV
          ## echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          ## echo "TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          ## echo "ACR_NAME=${{ secrets.ACR_NAME }}" >> $GITHUB_ENV
          ## echo "AZSUBSCRIPTION=${{ secrets.AZSUBSCRIPTION }}" >> $GITHUB_ENV
          ## echo "CONTAINER_REGISTRY_NAME=${{ secrets.CONTAINER_REGISTRY_NAME }}" >> $GITHUB_ENV
          echo "MULTINODE=${{ secrets.MULTINODE }}" >> $GITHUB_ENV
          echo "TLS=${{ secrets.TLS }}" >> $GITHUB_ENV
          echo "APP_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          ##echo "GRAPHISTRY_KEY=${{ secrets.GRAPHISTRY_KEY }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN }}" >> $GITHUB_ENV
          echo "CONTAINER_REGISTRY_NAME=${{ secrets.CONTAINER_REGISTRY_NAME }}" >> $GITHUB_ENV
          echo "DOCKER_USER_NAME=${{ secrets.DOCKER_USER_NAME }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> $GITHUB_ENV
          echo "CLUSTER_ENV=${{ github.event.inputs.cluster }}" >> $GITHUB_ENV
          echo "DOCKER_USER_NAME_PROD=${{ secrets.DOCKER_USER_NAME_PROD }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD_PROD=${{ secrets.DOCKER_PASSWORD_PROD }}" >> $GITHUB_ENV
## docker compose build
      - name: Build the cluster dockerfile
        run: docker-compose -f dev-compose/docker-compose.yml build


      - name: setup the cluster
        run:  docker-compose -f dev-compose/docker-compose.yml up cluster-setup
##needs to run only once 

      - name: create aws credentials
        run:  docker-compose -f dev-compose/docker-compose.yml up aws-setup  
# needs to only run once

      - name: create cluster secrets
        run:  docker-compose -f dev-compose/docker-compose.yml up make-cluster-secrets  
# needs to only run once

# deploy to skinny dev cluster
      - name: deploy the dev cluster
        if: "${{ env.CLUSTER == 'skinny' }}"
        run: docker-compose -f dev-compose/docker-compose.yml up helm-docker-dev 
        env:
            CLUSTER: ${{github.event.inputs.cluster}}
# deploy to eks2 cluster
      - name: deploy the eks-dev2 cluster
        if: "${{ env.CLUSTER == 'eks-dev2' }}"
        run: docker-compose -f dev-compose/docker-compose.yml up helm-docker-dev 
        env:
            CLUSTER: ${{github.event.inputs.cluster}}