global:
   #- Each StorageClass has a provisioner that determines what volume plugin is used for provisioning PVs.
  provisioner: kubernetes.io/aws-ebs #storage class provisioner
  multiNode: false # multinode selector switch to determine if going multi/single node
  containerregistry:  #container registry name
    name: docker.io/graphistry
  devMode: false  #dev mode for debugging with nexus, postgres and nginx
  postgres:
    repository: graphistry-postgres  #postgres repository name 
    name: graphistry #postgres db name
    user: graphistry #postgres db user
    port: 5432  #port for postgres service to listen on
    host: postgres  #hostname for postgres
  tag: latest  #tag for the docker image
  #image pull policy
  imagePullPolicy: IfNotPresent ##image pull policy could also be Always
  restartPolicy: Always #restart policy
  imagePullSecrets: [] #image pull secrets name
  #  - name: docker-secret
  nodeSelector: #node selector to determine which node to deploy cluster to
  #{"accelerator": "nvidia"}
  #--set nodeSelector."accelerator"=nvidia
  #{"kubernetes.io/hostname": "ip-172-31-32-176.us-east-2.compute.internal"}
  #--set nodeSelector."kubernetes\\.io/hostname"=ip-172-31-7-234.us-east-2.compute.internal
  logs: #log levels
    LogLevel: INFO
    GraphistryLogLevel: INFO
  postgresVolumeLabel:  #postgres volume label
  PostgresResources: #{}  # Resources for the postgres pods
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
     limits:
       cpu: 100m
       memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

postgresCluster:
  instance1:
    dataVolumeClaimSpec:
      resources:
        requests:
          storage: 10Gi

  patroni:
    dynamicConfiguration:
      postgresql:
        pg_hba:
          - "host all all 0.0.0.0/0 trust" # This line enable logical replication with programmatic access
          - "host all postgres 127.0.0.1/32 md5"

  backups:
    pgbackrest: # Check for more config options https://pgbackrest.org/configuration.html
      global:
        repo1-retention-full: "3"  # Keeps 3 full backups
        repo1-retention-archive: "10"  # Retain the last 10 archive logs
      repoHost:
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 256Mi
      sidecars:
        pgbackrest:
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 128Mi
        pgbackrestConfig:
          resources:
            requests:
              cpu: 200m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 128Mi
      jobs:
        resources:
          requests:
            cpu: 200m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 128Mi
      restore:
        repoName: repo1
        enabled: false
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 100m
            memory: 128Mi

      repos:
        repo1:
          schedule:
            full: "0 1 * * 0"  # Weekly full backup every Sunday at 1 AM
            differential: "0 3 * * *"  # Daily differential backup
            incremental: "*/30 * * * *"  # Every 30 minutes for incremental backups
          volume:
            volumeClaimSpec:
              resources:
                requests:
                  storage: 20Gi
