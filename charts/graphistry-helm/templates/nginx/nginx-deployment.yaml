apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "4040"
  labels:
    io.kompose.service: nginx
    app: nginx-{{ .Release.Namespace }}
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: nginx
  strategy:
{{ if eq .Values.rollingUpdate true }}
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: "0%"
{{ else }}
    type: Recreate
{{- end }}
  template:
    metadata:
      labels:
        io.kompose.network/grph: "true"
        io.kompose.service: nginx
    spec:
      initContainers:
      {{ if eq .Values.global.devMode false }} 
      - name: "nginx-wait-for-forge-etl"
        {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        resources:
          {{- toYaml .Values.InitContainerResources | nindent 10 }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args: 
        - "service"
        - "forge-etl"
      - name: "nginx-wait-for-forge-etl-python"
        {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        resources:
          {{- toYaml .Values.InitContainerResources | nindent 10 }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args: 
        - "service"
        - "forge-etl-python"
      - name: "nginx-wait-for-streamgl-gpu"
        {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        resources:
          {{- toYaml .Values.InitContainerResources | nindent 10 }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args: 
        - "service"
        - "streamgl-gpu"
      - name: "nginx-wait-for-streamgl-sessions"
        {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        resources:
          {{- toYaml .Values.InitContainerResources | nindent 10 }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args: 
        - "service"
        - "streamgl-sessions"
      - name: "nginx-wait-for-streamgl-vgraph-etl"
        {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        resources:
          {{- toYaml .Values.InitContainerResources | nindent 10 }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args: 
        - "service"
        - "streamgl-vgraph-etl"       
      - name: nginx-init-streamgl-viz
        resources:
          {{- toYaml .Values.InitContainerResources | nindent 10 }}
        image: {{.Values.global.containerregistry.name}}/{{.Values.graphistry}}:{{.Values.streamglviz.repository}}-{{.Values.global.tag}}-{{.Values.cuda.version}}
        command: 
        - sh 
        - -c 
        - cp -r /opt/graphistry/apps/core/viz/build/* /tmp/build/
        volumeMounts:
        - name: viz-static
          mountPath: /tmp/build
      {{ end }}          
      - name: nginx-init-pivot
        {{ if eq .Values.global.devMode false }}
        image: {{.Values.global.containerregistry.name}}/{{.Values.graphistry}}:{{.Values.pivot.repository}}-{{.Values.global.tag}}-{{.Values.cuda.version}}
      {{ else }}
        image: {{.Values.graphistry}}/{{.Values.pivotDev.repository}}:{{.Values.global.tag}}-dev
    {{ end }}  
        resources:
          {{- toYaml .Values.InitContainerResources | nindent 10 }}
        command: 
        - sh 
        - -c
        - cp -r /opt/graphistry/apps/core/pivot/www/* /tmp/www/
        volumeMounts:
        - name: pivot-static
          mountPath: /tmp/www
          
      containers:
        - env:
   {{- range .Values.env }}
          - name: {{ .name  }}
            value: {{ .value | quote }}
   {{- end }}
          - name: POSTGRES_HOST
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: host } }
          - name: POSTGRES_PORT
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: port } }
          - name: POSTGRES_DB
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: dbname } }
          - name: POSTGRES_USER
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: user } }
          - name: POSTGRES_PASSWORD
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: password } }
          - name: DATABASE_URL
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: uri } }
          - name: K8S_NAMESPACE_SUFFIX
            value: .{{ .Release.Namespace }}.svc.cluster.local
          - name: LONGHORN_NAMESPACE
            value: .longhorn-system.svc.cluster.local
          - name: K8S_DASHBOARD_NAMESPACE
            value: .kubernetes-dashboard.svc.cluster.local
          - name: GRAFANA_SERVICE_NAME
            value: prometheus-community-grafana.prometheus.svc.cluster.local
          - name: IS_K8S
            value: "1"
          - name: NGINX_RESOLVER
            value: kube-dns.kube-system.svc.cluster.local
          - name: ST_PUBLIC_BASE_PATH
            value: "/dashboard"
          - name: ST_PRIVATE_BASE_PATH
            value: "/dashboard"  
          - name: GRAPHISTRY_LOG_LEVEL
            value: {{ .Values.global.logs.GraphistryLogLevel | quote }}
          - name: LOG_LEVEL
            value: {{ .Values.global.logs.LogLevel | quote }} 
          {{if eq .Values.metrics true }} 
          - name: EXTRA_NGINX_LOGS
            value: access_log syslog:server=127.0.0.1:5531,tag=nginx,severity=info custom;
          {{ end }}
   {{ if eq .Values.global.devMode false }}
          #image: acrgraphistryk8s.azurecr.io/graphistry/streamgl-nginx:v2.39.12-universal
          image: {{.Values.global.containerregistry.name}}/{{.Values.graphistry}}:{{.Values.nginx.repository}}-{{.Values.global.tag}}-universal
    {{ else }}
          image: {{.Values.graphistry}}/{{.Values.nginxDev.repository}}:{{.Values.global.tag}}-universal-dev
    {{ end }}      
          imagePullPolicy: {{.Values.global.imagePullPolicy }}          
          livenessProbe:
            exec:
              command:
                - curl 
                - -f 
                - http://localhost/healthz
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 120
            timeoutSeconds: 30

          name: nginx
          ports:
            - containerPort: {{.Values.nginxPorts.portOne}}
              name: http
              protocol: TCP
            - containerPort: {{.Values.nginxPorts.portTwo}}
          resources:
            {{- toYaml .Values.NginxResources | nindent 12 }}
          volumeMounts:
        {{ if eq .Values.global.devMode true }}
            - mountPath: /opt/graphistry/apps/core/viz/www/public
              name: viz-empty
        {{ else }}
            - mountPath: /opt/graphistry/apps/core/viz/build
              name: viz-static
        {{- end }}
            - mountPath: /opt/graphistry/apps/core/pivot/www
              name: pivot-static
            - mountPath: /opt/graphistry/apps/core/nexus/staticfiles
              name: local-media-mount
            - mountPath: /opt/graphistry/data/uploads
              name: uploads-files
            - mountPath: /opt/graphistry/data
              name: data-mount
{{if eq .Values.metrics true }}
        - env:         
          - name: PROMETHEUS_PORT
            value: "4040"
          {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
          image: ghcr.io/martin-helmich/prometheus-nginxlog-exporter/exporter:v1.9.2 #DockerHub
          {{ else }}
          image: {{.Values.global.containerregistry.name}}/prometheus-nginxlog-exporter:v1.9.2
          {{- end }}
          args: ["-config-file", "/etc/prometheus-nginxlog-exporter/config.hcl"]
          imagePullPolicy: {{.Values.global.imagePullPolicy }}
          name: nginx-log-exporter
          ports:
            - containerPort: 4040
          resources:
            {{- toYaml .Values.NginxResources | nindent 12 }}
          volumeMounts:
          - name: exporter-config
            mountPath: /etc/prometheus-nginxlog-exporter

{{- end }}

      restartPolicy: {{ .Values.global.restartPolicy }}
      serviceAccountName: job-robot
      volumes:
        {{ if eq .Values.global.devMode true }}
        - name: viz-empty
          emptyDir: {}
        {{ else }}
        - name: viz-static
          emptyDir: {}
        {{- end }}
        - name: pivot-static
          emptyDir: {}           
        - name: local-media-mount
          persistentVolumeClaim:
            claimName: local-media-mount
        - name: uploads-files
          persistentVolumeClaim:
            claimName: uploads-files
        - name: data-mount
          persistentVolumeClaim:
            claimName: data-mount
        - name: exporter-config
          configMap:
            name: exporter-config
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
#      imagePullSecrets:
#          - name: {{ .Values.global.imagePullSecrets }}  
{{ if eq .Values.global.multiNode false }}
      nodeSelector: {{- .Values.global.nodeSelector | toYaml | nindent 8 }}
{{- end }} 
status: {}

---
#service
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: nginx
    app: nginx-{{ .Release.Namespace }}
  name: nginx
spec:
  ports:
    - name: "{{.Values.nginxPorts.portOne}}"
      port: {{.Values.nginxPorts.portOne}}
      targetPort: {{.Values.nginxPorts.portOne}}
    - name: "{{.Values.nginxPorts.portTwo}}"
      port: {{.Values.nginxPorts.portTwo}}
      targetPort: {{.Values.nginxPorts.portTwo}}
    - name: metrics
      port: 4040
      targetPort: 4040
  selector:
    io.kompose.service: nginx



