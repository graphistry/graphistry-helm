{{ if eq .Values.global.devMode false }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: streamgl-viz
  name: streamgl-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: streamgl-viz
  strategy:
{{ if eq .Values.rollingUpdate true }}
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: "0%"
{{ else }}
    type: Recreate
{{- end }}
  template:
    metadata:
      labels:
        io.kompose.network/grph: "true"
        io.kompose.service: streamgl-viz
    spec:
      initContainers:
      - name: "streamgl-viz-wait-for-postgres"
        {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        resources:
          {{- toYaml .Values.InitContainerResources | nindent 10 }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args: 
        - "pod"
        - "-lapp=postgres"
      - name: "streamgl-viz-wait-for-redis"
        {{- if eq .Values.global.containerregistry.name "docker.io/graphistry" }}
        image: "groundnuty/k8s-wait-for:latest" #DockerHub
        {{ else }}
        image: {{.Values.global.containerregistry.name}}/k8s-wait-for:latest
        {{- end }}
        resources:
          {{- toYaml .Values.InitContainerResources | nindent 10 }}
        imagePullPolicy: {{.Values.global.imagePullPolicy }} 
        args: 
        - "service"
        - "redis"
      containers:
        - env:
          - name : NODE_ENV
            value: {{ .Values.nodeEnv | quote }}
      #{{ if eq .Values.devMode true }}
          #- name: SKIP_ACTIVATE
          #  value: "true"

      #{{- end }}
   {{- range .Values.env }}
          - name: {{ .name  }}
            value: {{ .value | quote }}
   {{- end }}
          - name: POSTGRES_HOST
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: host } }
          - name: POSTGRES_PORT
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: port } }
          - name: POSTGRES_DB
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: dbname } }
          - name: POSTGRES_USER
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: user } }
          - name: POSTGRES_PASSWORD
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: password } }
          - name: DATABASE_URL
            valueFrom: { secretKeyRef: { name: {{.Values.global.postgres.host }}-pguser-{{.Values.global.postgres.user }}, key: uri } }
          - name: GRAPHISTRY_LOG_LEVEL
            value: {{ .Values.global.logs.GraphistryLogLevel | quote }}
          - name: LOG_LEVEL
            value: {{ .Values.global.logs.LogLevel | quote }}  
          image: {{.Values.global.containerregistry.name}}/{{.Values.graphistry}}:{{.Values.streamglviz.repository}}-{{.Values.global.tag}}-{{.Values.cuda.version}}
          imagePullPolicy: {{.Values.global.imagePullPolicy }}   
          livenessProbe:
            exec:
              command:
                - curl
                - -Lf
                - http://localhost:8080/health
            failureThreshold: 3
            initialDelaySeconds: 180
            periodSeconds: 120
            timeoutSeconds: 30
          name: streamgl-viz
          ports:
            - containerPort: 8080
          resources:
            {{- toYaml .Values.StreamglVizResources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/graphistry/data
              name: data-mount
      restartPolicy: {{ .Values.global.restartPolicy }}
      serviceAccountName: job-robot
      volumes:
        - name: data-mount
          persistentVolumeClaim:
            claimName: data-mount
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
#      imagePullSecrets:
#          - name: {{ .Values.global.imagePullSecrets }} 
{{ if eq .Values.global.multiNode false }}
      nodeSelector: {{- .Values.global.nodeSelector | toYaml | nindent 8 }}
{{- end }} 
status: {}


---
#service
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: streamgl-viz
  name: streamgl-viz
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: streamgl-viz
status:
  loadBalancer: {}

{{- end }}    